{"mappings":"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","sources":["src/main.js"],"sourcesContent":["let work = {}\r\nlet todoList = []\r\nlet workIndex\r\nconst newTodo = document.querySelector('#newTodo')\r\n\r\nwindow.onload = function () {\r\n    render()\r\n    //定时器每秒调用一次fnDate()\r\n    setInterval(function () {\r\n        fnDate()\r\n    }, 1000)\r\n}\r\n\r\n//监听回车事件  当输入框获得焦点且回车键被敲击时,调用addTodo()函数\r\ndocument.addEventListener('keypress', function (e) {\r\n    if (document.activeElement.id === 'newTodo' && e.key === 'Enter') {\r\n        addTodo()\r\n    }\r\n})\r\n\r\n//将待做事项列表保存到本地存储中\r\nfunction saveData(data) {\r\n    localStorage.setItem('myTodoList', JSON.stringify(data))\r\n}\r\n\r\n//从本地存储中调用待做列表,当本地存储无对应列表时,返回空数组\r\nfunction loadData() {\r\n    const record = localStorage.getItem('myTodoList')\r\n    if (record !== null) {\r\n        return JSON.parse(record)\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\n//页面渲染 主函数 获取页面需要更新的所有数据,当数据更新时将页面重新渲染\r\nfunction render() {\r\n    let todo = document.querySelector('.todoList'),\r\n        done = document.querySelector('.doneList'),\r\n        left = document.querySelector('.leftCount'),\r\n        todoString = '',\r\n        doneString = '',\r\n        leftCount = 0\r\n    \r\n    document.querySelector('#newTodo').focus()\r\n    todoList = loadData()\r\n    if(todoList.length===0){            //设置遮罩 当没有待办事项时,显示默认遮罩div,当存在条目时,将遮罩隐藏\r\n        document.querySelector('.mask').style.display='flex'\r\n    }else {\r\n        document.querySelector('.mask').style.display='none'\r\n    }\r\n    if (todoList !== null) {\r\n        todoList.map((e) => {\r\n            if (!e.done) {\r\n                todoString = '<li>\\n' +\r\n                    '                    <input type=\"checkbox\" name=\"checkBtn\" class=\"checkBtn\" id=\"' + e.id + '\" onclick=\"check(id,checked)\" >\\n' +\r\n                    '                    <p class=\"content\" id=\"' + 'input' + e.id + '\" ondblclick=edit(id)>' + e.data + '</p>\\n' +\r\n                    '                    <button class=\"closeBtn\"  id=\"' + 'close' + e.id + '\" onclick=remove(id)>×</button>\\n' +\r\n                    '                </li>' + todoString\r\n                leftCount++\r\n            } else {\r\n                doneString += '<li>\\n' +\r\n                    '                    <input type=\"checkbox\" checked name=\"checkBtn\" class=\"checkBtn\" id=\"' + e.id + '\" onclick=\"check(id,checked)\">\\n' +\r\n                    '                    <p class=\"content\" id=\"' + 'input' + e.id + '\" ondblclick=edit(id)>' + e.data + '</p>\\n' +\r\n                    '                    <button class=\"closeBtn\"  id=\"' + 'close' + e.id + '\" onclick=remove(id)>×</button>\\n' +\r\n                    '                </li>'\r\n            }\r\n        })\r\n        todo.innerHTML = todoString\r\n        done.innerHTML = doneString\r\n        left.innerHTML = leftCount.toString() + ' items left'\r\n    } else {\r\n        todo.innerHTML = ''\r\n        done.innerHTML = ''\r\n        left.innerHTML = '0 items left'\r\n    }\r\n}\r\n\r\n//重绘页面 当事项数据更改时,先存储新列表至本地存储中,然后再对页面进行渲染\r\nfunction update(todoList) {\r\n    saveData(todoList)\r\n    render()\r\n}\r\n\r\n// 随机数函数  生成10-12位不等的字符串作为每一条待做事项的唯一Id\r\nfunction uniqueId() {\r\n    return (Number(Math.random().toString().substring(2)) * new Date().getTime()).toString(36).slice(0, -8)\r\n}\r\n\r\n// 新增待做事项条目\r\n// 创建一个数组对象来保存用户输入的数据，数组的每一项都是一个对象\r\n// 对象的\"id\"属性保存着用户输入的数据的唯一id,对象的\"data\"属性保存着用户输入的数据,\"done\"属性可理解为用户输入数据的标签,主要用于之后对多条数据进行分类。\r\n// 每次用户输入完数据，都要更新缓存，并初始化输入框。\r\nfunction addTodo() {\r\n    work = {\r\n        id: '',\r\n        data: '',\r\n        done: false\r\n    }\r\n    newTodo.value = newTodo.value.trim()\r\n    if (newTodo.value === '') {\r\n        alert('内容不能为空')\r\n        newTodo.value = ''\r\n        newTodo.focus()\r\n    } else {\r\n        work.id = uniqueId()\r\n        work.data = newTodo.value\r\n        todoList.push(work)\r\n        saveData(todoList)\r\n        render()\r\n        newTodo.value = ''\r\n        newTodo.focus()\r\n    }\r\n}\r\n\r\n// 查找该唯一id在todoList中对应的位置 并返回其index值\r\nfunction seekIndex(seekId) {\r\n    todoList.forEach((e) => {\r\n        if (e.id === seekId) {\r\n            workIndex = todoList.indexOf(e)\r\n        }\r\n    })\r\n}\r\n\r\n// 当checkbox被点击时, 更新work对象中的done属性,并且更新todoList中对应的work对象,并更新页面\r\nfunction check(checkId, checked) {\r\n    const inputContent = document.getElementById(checkId).nextElementSibling.textContent\r\n    work = {id: checkId, data: inputContent, done: checked}\r\n    seekIndex(work.id)\r\n    todoList.splice(workIndex, 1, work)\r\n    update(todoList)\r\n}\r\n\r\n// 当删除按钮被点击时,删除todoList中的对应条目,并更新页面\r\nfunction remove(closeId) {       //此处一开始定义函数名为close(),但是onclick无法触发, 原因为函数命名与系统库名close冲突\r\n    seekIndex(closeId.substring(5))\r\n    todoList.splice(workIndex, 1)\r\n    update(todoList)\r\n}\r\n\r\n// 当数据对象的内容框被双击时对数据条目进行重新编辑, 弹出prompt窗口获取新编辑内容,并更新页面\r\nfunction edit(inputId) {\r\n    seekIndex(inputId.substring(5))\r\n    const editContent = window.prompt('重新编辑内容', todoList[workIndex].data).trim()\r\n    if (editContent === '') {\r\n        alert('内容不能为空')\r\n    } else {\r\n        todoList[workIndex].data = editContent\r\n        saveData(todoList)\r\n        render()\r\n    }\r\n}\r\n\r\n//删除所有数据条目 重置本地存储,并更新页面\r\nfunction clearAll() {\r\n    localStorage.clear()\r\n    render()\r\n}\r\n\r\n//filter方法检索所有已完成的事项并返回一个新数组,新数组不包括任何已完成的对象,并更新页面\r\nfunction clearDone() {\r\n    todoList = todoList.filter(e =>\r\n        e.done === false\r\n    )\r\n    update(todoList)\r\n}\r\n\r\n// 获取当前时间 并设置页面中#time1 #time2 元素的内容\r\nfunction fnDate() {\r\n    let timeDiv1 = document.getElementById('time1')\r\n    let timeDiv2 = document.getElementById('time2')\r\n    let date = new Date()\r\n    let year = date.getFullYear() //当前年份\r\n    let month = date.getMonth() //当前月份\r\n    let data = date.getDate() //天\r\n    let hours = date.getHours() //小时\r\n    let minute = date.getMinutes() //分\r\n    let second = date.getSeconds() //秒\r\n    let simpleTime = fnW(hours) + ':' + fnW(minute)\r\n    let detailTime =\r\n        year +\r\n        '-' +\r\n        fnW(month + 1) +\r\n        '-' +\r\n        fnW(data) +\r\n        ' ' +\r\n        fnW(hours) +\r\n        ':' +\r\n        fnW(minute) +\r\n        ':' +\r\n        fnW(second)\r\n    timeDiv1.innerHTML = simpleTime\r\n    timeDiv2.innerHTML = detailTime\r\n}\r\n\r\n// 对时间数据进行处理\r\nfunction fnW(str) {\r\n    let num\r\n    str >= 10 ? (num = str) : (num = '0' + str)\r\n    return num\r\n}\r\n\r\n"],"names":["workIndex","work","todoList","newTodo","document","querySelector","saveData","data","localStorage","setItem","JSON","stringify","loadData","record","getItem","parse","render","todo","done","left","todoString","doneString","leftCount","focus","length","style","display","map","e","id","innerHTML","toString","update","todoList1","uniqueId","Number","Math","random","substring","Date","getTime","slice","addTodo","value","trim","alert","push","seekIndex","seekId","forEach","indexOf","check","checkId","checked","inputContent","getElementById","nextElementSibling","textContent","splice","remove","closeId","edit","inputId","editContent","window","prompt","clearAll","clear","clearDone","filter","fnDate","timeDiv1","timeDiv2","date","year","getFullYear","month","getMonth","getDate","hours","getHours","minute","getMinutes","second","getSeconds","simpleTime","fnW","detailTime","str","num","onload","setInterval","addEventListener","activeElement","key"],"version":3,"file":"index.96dae1be.js.map"}